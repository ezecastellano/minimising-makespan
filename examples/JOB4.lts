const CantTask = 4
range Tasks = 1..CantTask
const Limit = 5
range Memory = 0..Limit

set Controllable = {s.[a:Tasks],g}
set NotControllable = {e.[a:Tasks]}
set Alphabet = {Controllable}

JOB(ID=1) = (s.[ID] -> e.[ID] -> g -> JOB).

MEM = RAM[0],
RAM[u:Memory] = (s.[a:Tasks] -> RAM[a+u] | e.[a:Tasks] -> RAM[u-a]).

||Environment = (forall[t:Tasks] JOB(t) || MEM).

fluent PROCESSING[i:Tasks] = <s.[i],e.[i]>
assert KEEP_WORKING = forall[i:1..CantTask] PROCESSING[i]
assert ALLFINISH = forall[i:1..CantTask] FINISH[i]
fluent GOAL= <g, Alphabet\{g}>

fluent START[i:Tasks] = <s.[i],g>
fluent FINISH[i:Tasks] = <e.[i],g>

fluent PROCESSING_3 = <s.[3],e.[3]>

ltl_property S2AftF1 = [] (START[2] -> FINISH[1])
ltl_property S1AftS4orS3 = [] (START[1] -> START[3] || START[4])

controller ||C = (Environment)~{G1}.

|| K = (C || C).

controllerSpec G1 = {
	safety = {S2AftF1,S1AftS4orS3}
	reachability = {GOAL}
	algorithm = NON_DOMINATED
	activityDefinitions = {KEEP_WORKING}
	controllable = {Controllable}
}
